# -*- coding: utf-8 -*-
"""
Created on Tue Jul 27 10:02:56 2021

@author: deads
"""


# The code for changing pages was derived from: http://stackoverflow.com/questions/7546050/switch-between-two-frames-in-tkinter
# License: http://creativecommons.org/licenses/by-sa/3.0/	
import energyPython as En
import matplotlib
matplotlib.use("TkAgg")
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg, NavigationToolbar2Tk
from matplotlib.figure import Figure

import tkinter as tk
from tkinter import ttk

LARGE_FONT= ("Verdana", 12)
 
class PowerApp(tk.Tk):

    def __init__(self, *args, **kwargs):
        
        tk.Tk.__init__(self, *args, **kwargs)

        tk.Tk.iconbitmap(self, default="thunder.ico")
        tk.Tk.wm_title(self, "Power Production")
        
        
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand = True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)
        self.frames = {}
        for F in (StartPage,graphOptions):

            frame = F(container, self)

            self.frames[F] = frame

            frame.grid(row=0, column=0, sticky="nsew")
        #    frame.tkraise()
        self.show_frame(StartPage)

    def show_frame(self, cont):

        frame = self.frames[cont]
        frame.tkraise()

        
class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        tk.Frame.__init__(self,parent)
        label = tk.Label(self, text="Start Page", font=LARGE_FONT)
        label.pack(pady=10,padx=10)

        button = ttk.Button(self, text="Graph options",
                            command=lambda: controller.show_frame(graphOptions))
        button.pack()
        
        L1 = tk.Label(self, text="Latitude:", font = LARGE_FONT)
        L1.pack()
        T1 = tk.Text(self)
        Lat = """Some writing"""
        T1.insert(tk.END,Lat)
        
        L2 = tk.Label(self, text="Years:", font = LARGE_FONT)
        L2.pack()
        T1 = tk.Text(self)
        Lat = """Some writing"""
        T1.insert(tk.END,Lat)
        
        L3 = tk.Label(self, text="Number of Wind turbines:", font = LARGE_FONT)
        L3.pack()
        T1 = tk.Text(self)
        Lat = """Some writing"""
        T1.insert(tk.END,Lat)
        
        L4 = tk.Label(self, text="Area of Solar Panels(m^2):", font = LARGE_FONT)
        L4.pack()
        T1 = tk.Text(self)
        Lat = """Some writing"""
        T1.insert(tk.END,Lat)
        
        L5 = tk.Label(self, text="Number of Nuclear Reactors:", font = LARGE_FONT)
        L5.pack()
        T1 = tk.Text(self)
        Lat = """Some writing"""
        T1.insert(tk.END,Lat)
        
        L6 = tk.Label(self, text="Efficiency of Solar Panels (10-25%):", font = LARGE_FONT)
        L6.pack()
        T1 = tk.Text(self)
        Lat = """Some writing"""
        T1.insert(tk.END,Lat)
        
        L7 = tk.Label(self, text="Number of Sunny Days:", font = LARGE_FONT)
        L7.pack()
        T1 = tk.Text(self)
        Lat = """Some writing"""
        T1.insert(tk.END,Lat)
        
        L8 = tk.Label(self, text="Number of Windy Days:", font = LARGE_FONT)
        L8.pack()
        T1 = tk.Text(self)
        Lat = """Some writing"""
        T1.insert(tk.END,Lat)


class graphOptions(tk.Frame):
    
    def __init__(self, parent, controller):
        tk.Frame.__init__(self, parent)
    
        label = tk.Label(self, text="Graph Options", font=LARGE_FONT)
        label.pack(pady=10,padx=10)
        

        button1 = ttk.Button(self, text="Back to Home",
                             command=lambda: controller.show_frame(StartPage))
        button1.pack()
        
        L1 = tk.Label(self, text="Latitude:", font = LARGE_FONT)
        L1.pack()
        self.E1 = tk.Entry(self,bd=3)
        self.E1.insert(0,"0")
        self.E1.pack()
        
        L2 = tk.Label(self, text="Years:", font = LARGE_FONT)
        L2.pack()
        self.E2 = tk.Entry(self,bd=3)
        self.E2.insert(0,"1")
        self.E2.pack()
        
        L3 = tk.Label(self, text="Number of Wind turbines:", font = LARGE_FONT)
        L3.pack()
        self.E3 = tk.Entry(self,bd=3)
        self.E3.insert(0,"50")
        self.E3.pack()
        
        L4 = tk.Label(self, text="Area of Solar Panels(m^2):", font = LARGE_FONT)
        L4.pack()
        self.E4 = tk.Entry(self,bd=3)
        self.E4.insert(0,"100")
        self.E4.pack()
        
        L5 = tk.Label(self, text="Number of Nuclear Reactors:", font = LARGE_FONT)
        L5.pack()
        self.E5 = tk.Entry(self,bd=3)
        self.E5.insert(0,"1")
        self.E5.pack()
        
        L6 = tk.Label(self, text="Efficiency of Solar Panels (10-25%):", font = LARGE_FONT)
        L6.pack()
        self.E6 = tk.Entry(self,bd=3)
        self.E6.insert(0,"15")
        self.E6.pack()
        
        L7 = tk.Label(self, text="Number of Sunny Days:", font = LARGE_FONT)
        L7.pack()
        self.E7 = tk.Entry(self,bd=3)
        self.E7.insert(0,"100")
        self.E7.pack()
        
        L8 = tk.Label(self, text="Number of Windy Days:", font = LARGE_FONT)
        L8.pack()
        self.E8 = tk.Entry(self,bd=3)
        self.E8.insert(0,"100")
        self.E8.pack()
        
        self.lb = tk.Listbox(self,selectmode = "single")
        self.lb.insert(1,"Power Production Comparison")
        self.lb.insert(2,"Cost in Dollars Comparison")
        self.lb.insert(3,"Solar Breakeven")
        self.lb.insert(4,"Wind Breakeven")
        self.lb.insert(5,"Nuclear Breakeven")
        self.lb.pack()
        
        def graph():
            
            self.Power = En.Energy(int(self.E1.get()),int(self.E8.get()),float(self.E6.get()),
                          int(self.E4.get()),int(self.E3.get()),int(self.E5.get()),
                          int(self.E2.get()),int(self.E7.get()))
            self.Power.startup()
            self.Power.SunIntensity()
            f = Figure(figsize=(5,5), dpi=100)
            f.add_subplot(111)
            for i in range(5):
                if (self.lb.selection_includes(i) == True and i == 0):
                    self.Power.PossiblePower()
                if (self.lb.selection_includes(i) == True and i == 1):
                    self.Power.Cost()
                if (self.lb.selection_includes(i) == True and i == 2):
                    self.Power.breakEvenS()
                if (self.lb.selection_includes(i) == True and i == 3):
                    self.Power.breakEvenW()
                if (self.lb.selection_includes(i) == True and i == 4):
                    self.Power.breakEvenN()
            
        button3 = ttk.Button(self, text="Generate Graph",
                            command=graph)
        button3.pack()
        
        
    

        

app = PowerApp()
app.mainloop()
